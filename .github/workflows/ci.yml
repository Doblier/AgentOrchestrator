name: CI

on:
  push:
    # branches: [ main ]
    branches: [ feature/crfi001 ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    services:
      redis:
        image: redis:latest
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Install UV
      run: |
        pip install --upgrade pip
        pip install uv
        
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
        
    - name: Install dependencies
      run: |
        uv pip install --system -e ".[test]"
        
    - name: Lint with Ruff
      uses: astral-sh/ruff-action@v3
      with:
        version: latest
        args: check --output-format=github
        
    - name: Format with Ruff
      uses: astral-sh/ruff-action@v3
      with:
        version: latest
        args: format --check
        
    - name: Prepare test environment
      run: |
        # Create output directory needed by some tests
        mkdir -p output
        
    - name: Run tests
      run: |
        # Run all tests with security tests enabled
        python -m pytest --cov=agentorchestrator -v -m 'security or not security' --asyncio-mode=strict
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'dummy-key-for-testing' }}
        DATABASE_URL: ${{ secrets.DATABASE_URL || 'postgresql://test:test@localhost:5432/test' }}
        AUTH_DEFAULT_KEY: ${{ secrets.AUTH_DEFAULT_KEY || 'test-api-key' }}
        REDIS_HOST: ${{ secrets.REDIS_HOST || 'localhost' }}
        REDIS_PORT: ${{ secrets.REDIS_PORT || '6379' }}
        SECURITY_ENABLED: true
        RBAC_ENABLED: true
        AUDIT_LOGGING_ENABLED: true
        ENCRYPTION_ENABLED: true
        ENCRYPTION_KEY: test-key-for-encryption

  uat:
    needs: test
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/feature/crfi001' || startsWith(github.ref, 'refs/heads/release/'))
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/uv
        key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-uv-
          
    - name: Install dependencies
      run: |
        pip install --upgrade pip
        pip install uv
        uv pip install --system -e ".[test]"
        
    - name: Prepare test environment
      run: |
        # Create output directory needed by some tests
        mkdir -p output
        
    - name: Test API endpoints
      run: |
        # Run integration tests to verify API endpoints with security enabled
        python -m pytest tests/test_main.py tests/integration tests/security -v --asyncio-mode=strict
      env:
        GOOGLE_API_KEY: ${{ secrets.GOOGLE_API_KEY || 'dummy-key-for-testing' }}
        SECURITY_ENABLED: true
        RBAC_ENABLED: true
        AUDIT_LOGGING_ENABLED: true
        ENCRYPTION_ENABLED: true
        ENCRYPTION_KEY: test-key-for-encryption
        REDIS_HOST: localhost
        REDIS_PORT: 6379

  build:
    needs: [test, uat]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/feature/crfi001'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python 3.12
      uses: actions/setup-python@v4
      with:
        python-version: '3.12'
        cache: 'pip'
        
    - name: Install build tools
      run: |
        pip install --upgrade pip build uv
        
    - name: Build packages
      run: |
        python -m build
        
    - name: Generate locked requirements
      run: |
        uv pip compile pyproject.toml --python-version=3.12 --no-deps --output-file=requirements.lock
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        registry: docker.io
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        ecr: false
        
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: |
          ameenalam/agentorchestrator:latest
          ameenalam/agentorchestrator:${{ github.sha }}

  deploy-prod:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/feature/crfi001'
    environment: production
    
    steps:
    - name: Deploy to production
      run: |
        echo "Deploying to production environment"
        # Add actual deployment steps here 